@page "/add-non-profit"
@attribute [Authorize]
@using System.Security.Claims;
@using promoit_frontend_cs.Services;
@inject Microsoft​.AspNetCore​.Http.IHttpContextAccessor HttpContextAccessor
@inject HttpClient Http
@inject IHttpClientFactory ClientFactory
@inject RoleService roleService
@inject NonProfitRepresentativeService nonProfitRepresentativeService



@if (!flag)
{

	<div class="row mb-5">
		<div class="col-1 text-start">
			<a class="btn btn-primary"
		   href="/"
		   role="button">
				<span class="oi oi-arrow-left" aria-hidden="true"></span>
			</a>
		</div>
		<div class="col-6">
			<h3>Adding new non-profit company representative:</h3>
		</div>
	</div>

	<div class="row">
		<div class="col-6 offset-1">

			<EditForm Model="@newNPCR" OnValidSubmit="@sendNewNPCR">

				<DataAnnotationsValidator />

				<div class="row mb-4">
					<label for="npcrEmail" class="col-sm-3 col-form-label">Email</label>
					<div class="col-sm-9">
						<InputText type="email"
							   class="form-control"
							   id="npcrEmail"
							   @bind-Value="newNPCR.Email" />
						<ValidationMessage For="() => newNPCR.Email" />
					<small id="emailHelp" class="form-text text-muted">Check your e-mail address.</small>
					</div>
				</div>

				<div class="row mb-4">
					<label for="npcrCompany" class="col-sm-3 col-form-label">Organisation</label>
					<div class="col-sm-9">
						<InputText type="text"
							   class="form-control"
							   id="npcrCompany"
							   placeholder="Write your companie's name here"
							   @bind-Value="newNPCR.OrganizationName" />
						<ValidationMessage For="() => newNPCR.OrganizationName" />
					</div>
				</div>

				<div class="row mb-4">
					<label for="npcrLink" class="col-sm-3 col-form-label">Organisation link</label>
					<div class="col-sm-9">
						<InputText type="text"
							   class="form-control"
							   id="npcrLink"
							   placeholder="Provide the link for your organisation's website'"
							   @bind-Value="newNPCR.OrganizationLink" />
						<ValidationMessage For="() => newNPCR.OrganizationLink" />
					</div>
				</div>


				<div class="row mb-4">
					<div class="col-sm-6 offset-3">
						<button type="submit" class="btn btn-primary">Register</button>
						<button type="reset" class="btn btn-danger">Clear fields</button>
					</div>
				</div>

			</EditForm>
		</div>
	</div>
}
else
{
	<div class="row">
		<div class="row col-6 offset-1">
			<h4>@respond</h4>
		</div>
	</div>
}


@code {


	private NonProfitRepresentativeDTO newNPCR = new();
	bool flag = false;
	string respond;

	public async Task sendNewNPCR()
	{

		string user_id = HttpContextAccessor.HttpContext.User.Claims.FirstOrDefault(e => e.Type == "id").Value;
		var message = await nonProfitRepresentativeService.AddNewNPCR(newNPCR, user_id);
		if (message.ReasonPhrase == "Created")
		{
			try
			{
				await roleService.RoleAdder(user_id, "NPCR");
				respond = "Great! Now you need to log out and login back to enjoy the whole functionality of being a non-profit organization representative in PromoIT.";
			}
			catch (Exception exception)
			{
				respond = exception.Message;
			}
		}
		else
		{
			respond = message.ReasonPhrase;
		}
		flag = true;
	}

	

	protected override async Task OnInitializedAsync()
	{
		newNPCR.Email = HttpContextAccessor.HttpContext.User.Claims.FirstOrDefault(e => e.Type == "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/emailaddress").Value;
	}


	
}
