@page "/counter"
@attribute [Authorize]
@inject IJSRuntime IJSRuntime
@using Newtonsoft.Json;

<PageTitle>Counter</PageTitle>

<h1>Chose your role</h1>

<button class="btn btn-primary" @onclick="RenewToken">Role 1</button>
<p></p>
<button class="btn btn-primary" @onclick="RenewToken">Role 2</button>


<AuthorizeView Roles="Role 1">
    <p>This line could be seen only if your role is Role 1</p>
</AuthorizeView>

<AuthorizeView Roles="Role 2">
    <p>This line could be seen only if your role is Role 2</p>
</AuthorizeView>


<button class="btn" @onclick="RenewToken">Renew Token</button>

<p style="word-break:break-word">Your token is @token</p>
<p style="word-break:break-word">Your refresh token is @refresh_token</p>
<p style="word-break:break-word">Your new token is @newtoken</p>
<p style="word-break:break-word">Your new refresh token is @newrefresh_token</p>

@code {
    public string token;
    public string newtoken;
    public string refresh_token;
    public string newrefresh_token;


    protected async Task WriteCookies(string key, string value)
    {

        await IJSRuntime.InvokeAsync<object>("WriteCookie.WriteCookie", key, value, DateTime.Now.AddMinutes(1));

    }

    protected async Task<string> ReadCookies(string key)
    {

        return await IJSRuntime.InvokeAsync<string>("ReadCookie.ReadCookie", key);

    }

    private async Task RenewToken()
    {
        var client = new HttpClient { BaseAddress = new Uri("https://dev-jr7t62fw3n4cftwt.us.auth0.com") };
        var request = new HttpRequestMessage(HttpMethod.Post, "https://dev-jr7t62fw3n4cftwt.us.auth0.com/oauth/token");
        var body = new Dictionary<string, string>
   {
       { "grant_type", "refresh_token" },
       { "client_id", "1RAPuIXc8O65zsmujQQUnHixw0cdCsLY" },
       { "client_secret", "hLoMMUnRa0j_Ea6mpjozsGJxu2BAn-4--Gtao5ZLxXfw6zu-DsFhkTdSwyn27WUG" },
       { "refresh_token", refresh_token }
   };

        request.Content = new FormUrlEncodedContent(body);
        var response = await client.SendAsync(request);
        var json = await response.Content.ReadAsStringAsync();
        var result = JsonConvert.DeserializeObject<dynamic>(json);

        newtoken = result.id_token;
        newrefresh_token = result.refresh_token;
        await IJSRuntime.InvokeAsync<object>("WriteCookie.WriteCookie", "auth_token", newtoken, DateTime.Now.AddMinutes(1));
        await IJSRuntime.InvokeAsync<object>("WriteCookie.WriteCookie", "refresh_token", newrefresh_token, DateTime.Now.AddMinutes(1));


    }

    protected override async Task OnInitializedAsync()
    {
        token = await IJSRuntime.InvokeAsync<string>("ReadCookie.ReadCookie", "auth_token");
        refresh_token = await IJSRuntime.InvokeAsync<string>("ReadCookie.ReadCookie", "refresh_token");
    }

    private async Task ChoseRole1()
    {
       
    }
}
